import java.util.Scanner;

/**
 * This class represents a simple tic-tac-toe game between a player and a computer.
 *
 * @author Diancheng Tang
 */
public class Main {

    /**
     * The main method that initiates the tic-tac-toe game.
     *
     */
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        boolean gameOver = false;
        String[][] board = {{" ", " ", " "}, {" ", " ", " "}, {" ", " ", " "}};
        printBoard(board);

        System.out.println("Welcome to tic-tac-toe! Your marker will be x.");
        System.out.print("Enter the row you want to place your marker: ");
        int row = scan.nextInt();
        System.out.print("Enter the column you want to place your marker: ");
        int column = scan.nextInt();
        drawPlayerMark(board, row, column);
        printBoard(board);
        System.out.println("Now, it's the computer's turn!");
        drawComputerMark(board);
        printBoard(board);

        while (!gameOver) {
            System.out.print("Enter the row you want to place your marker: ");
            row = scan.nextInt();
            System.out.print("Enter the column you want to place your marker: ");
            column = scan.nextInt();
            if (isValidMove(board, row, column)) {
                drawPlayerMark(board, row, column);
                printBoard(board);
                if (checkWinner(board, "x")) {
                    System.out.println("Congratulations! You won!");
                    break;
                }
                System.out.println("Now, it's the computer's turn!");
                drawComputerMark(board);
                printBoard(board);
                if (checkWinner(board, "o")) {
                    System.out.println("You lost!");
                    break;
                }
            } else {
                System.out.println("That's not a valid move!");
            }
            if (isBoardFull(board)) {
                gameOver = true;
            }
        }
    }

    /**
     * Checks if the specified move is valid on the given tic-tac-toe board.
     *
     * @param board  The current state of the tic-tac-toe board.
     * @param row    The row where the player wants to place the marker.
     * @param column The column where the player wants to place the marker.
     * @return True if the move is valid, false otherwise.
     */
    public static boolean isValidMove(String[][] board, int row, int column) {
        return board[row - 1][column - 1].equals(" ");
    }

    /**
     * Places the player's marker on the specified position of the board.
     *
     * @param board  The current state of the tic-tac-toe board.
     * @param row    The row where the player wants to place the marker.
     * @param column The column where the player wants to place the marker.
     */
    public static void drawPlayerMark(String[][] board, int row, int column) {
        board[row - 1][column - 1] = "x";
    }

    /**
     * Places the computer's marker on a random valid position of the board.
     *
     * @param board The current state of the tic-tac-toe board.
     */
    public static void drawComputerMark(String[][] board) {
        int row = (int) (Math.random() * 3) + 1;
        int column = (int) (Math.random() * 3) + 1;
        if (!isValidMove(board, row, column)) {
            while (true) {
                row = (int) (Math.random() * 3) + 1;
                column = (int) (Math.random() * 3) + 1;
                if (isValidMove(board, row, column)) {
                    break;
                }
            }
        }
        board[row - 1][column - 1] = "o";
    }

    /**
     * Prints the current state of the tic-tac-toe board.
     *
     * @param board The current state of the tic-tac-toe board.
     */
    public static void printBoard(String[][] board) {
        System.out.println(" " + board[0][0] + "  |  " + board[0][1] + "  |  " + board[0][2]);
        System.out.println("————|—————|————");
        System.out.println(" " + board[1][0] + "  |  " + board[1][1] + "  |  " + board[1][2]);
        System.out.println("————|—————|————");
        System.out.println(" " + board[2][0] + "  |  " + board[2][1] + "  |  " + board[2][2]);
    }

    /**
     * Checks if the tic-tac-toe board is full.
     *
     * @param board The current state of the tic-tac-toe board.
     * @return True if the board is full, false otherwise.
     */
    public static boolean isBoardFull(String[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j].equals(" ")) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Checks if the specified marker has won the game on the given tic-tac-toe board.
     *
     * @param board The current state of the tic-tac-toe board.
     * @param mark  The marker to check for a win (either "x" or "o").
     * @return True if the specified marker has won, false otherwise.
     */
    public static boolean checkWinner(String[][] board, String mark) {
        return board[0][0].equals(mark) && board[0][1].equals(mark) && board[0][2].equals(mark) ||
                board[1][0].equals(mark) && board[1][1].equals(mark) && board[1][2].equals(mark) ||
                board[2][0].equals(mark) && board[2][1].equals(mark) && board[2][2].equals(mark) ||
                board[0][0].equals(mark) && board[1][0].equals(mark) && board[2][0].equals(mark) ||
                board[0][1].equals(mark) && board[1][1].equals(mark) && board[2][1].equals(mark) ||
                board[0][2].equals(mark) && board[1][2].equals(mark) && board[2][2].equals(mark) ||
                board[0][0].equals(mark) && board[1][1].equals(mark) && board[2][2].equals(mark) ||
                board[0][2].equals(mark) && board[1][1].equals(mark) && board[2][0].equals(mark);
    }
}
